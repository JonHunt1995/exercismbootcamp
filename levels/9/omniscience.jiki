// Helper Functions
function is_safe with maze, coords do
  set square to maze["x"]["y"]
  set within_x_range to coords["x"] >= 1 and coords["x"]
  set within_bounds to within_x_range and within_y_range
  set are_safe_contents to square.contents != "üî•" and square.contents != "üí©" and !square.is_wall
  return within_bounds and are_safe_contents
end

function get_directions do
  // direction is an enum with 
  // North -> 1
  // East -> 2
  // South -> 3
  // West -> 4
  return ["North", "East", "South", "West"]
end

// Main Game Loop Functions
function find_initial_coords with maze do
  for each row in maze indexed by y_coord do
    for each square in row indexed by x_coord do
      if square.is_start do
        return {"x": x_coord, "y": y_coord}
      end
    end
  end
  return {}
end

function extract_square with maze, coords do
  return maze[coords["x"]][coords["y"]]
end

function grab_emoji with emoji_collection, square do
  set emoji to square.contents
  if emoji == ""
    do return emoji_collection
  end
  if emoji != "‚≠ê" and emoji != "üèÅ" and emoji != "‚¨ú" do
    if !my#has_key(emoji_collection, emoji) do
      change emoji_collection[emoji] to 0
    end
    change emoji_collection[emoji] to emoji_collection[emoji] + 1
    remove_emoji()
  end
  return emoji_collection
end
// Game Loop
set maze to get_initial_maze()
set coords to find_initial_coords(maze)
set emoji_collection to {}
set square to extract_square(maze, coords)
set direction to 3 // Default to South
repeat_until_game_over do
  change square to extract_square(maze, coords)
  grab_emoji(emoji_collection, square)
  change direction to choose_next_path(maze, coords, direction)
  move_switch(direction)
end