/// Helper Functions
function within_bounds with maze, coords do
  if coords["x"] <= 0 or coords["y"] <= 0 do
    return false
  end
  set maze_width to my#length(maze[1])
  set maze_height to my#length(maze)
  return coords["x"] <= maze_width and coords["y"] <= maze_height
end

function are_safe_contents with square do
  return square.contents != "🔥" and square.contents != "💩" and !square.is_wall
end

function is_safe with maze, coords do
  if !within_bounds(maze, coords) do
    return false
  end
  set square to maze[coords["y"]][coords["x"]]
  return are_safe_contents(square)
end

function get_cardinal_direction with direction, delta do
  set directions to ["North", "East", "South", "West"]
  return directions[(3 + direction + delta) % 4 + 1]
end

function get_cardinal_square with cardinal_direction, coords do
  set directions to get_directions()
  if cardinal_direction == "North" do
   change coords["y"] to coords["y"] - 1
  else if cardinal_direction == "East" do
    change coords["x"] to coords["x"] + 1
  else if cardinal_direction == "South" do
    change coords["y"] to coords["y"] + 1
  else if cardinal_direction == "West" do
    change coords["x"] to coords["x"] - 1
  end
  return coords
end

// Main Game Loop Functions

// Find where blob is facing
function initialize_direction with maze, coords do
  set priorities to ["South", "West", "East", "North"]
  for each priority in priorities indexed by direction do
    if is_safe(maze, update_coords(coords, priority)) do
      return my#index(["North", "East", "South", "West"], priority)
    end
  end
  return 3
end

// Finds Coordinates Of Starting Square
function find_initial_coords with maze do
  for each row in maze indexed by y_coord do
    for each square in row indexed by x_coord do
      if square.is_start do
        return {"x": x_coord, "y": y_coord}
      end
    end
  end
  return {}
end

// Finds Square That Blob Is Standing On Based On Coordinates 
function extract_square with maze, coords do
  return maze[coords["y"]][coords["x"]]
end

// Grabs Emoji On Square That Blob Is Standing On
function grab_emoji with emoji_collection, square do
  set emoji to square.contents
  if emoji == "" do 
    return emoji_collection
  end
  if emoji != "⭐" and emoji != "🏁" and emoji != "⬜" do
    if !my#has_key(emoji_collection, emoji) do
      change emoji_collection[emoji] to 0
    end
    change emoji_collection[emoji] to emoji_collection[emoji] + 1
    square.remove_emoji()
  end
  return emoji_collection
end

// Chooses Next Path by First Checking Left Of Blob,
// In Front Of, To The Right Of, Then Behind
function choose_next_path with maze, coords, direction do
  set delta to -1 // Start at left path
  set possible_path to {} // Coordinates of square we're checking
  repeat 4 times do 
    change possible_path to update_coords(coords, get_cardinal_direction(direction, delta))
    if is_safe(maze, possible_path) do
      return delta
    end
    change delta to delta + 1
  end
  return delta
end

// Determines whether to turn left, move forward,
// right, or around based off of choose_next_path
function move_switch with delta do
  if delta == -1 do
    turn_left()
  else if delta == 1 do
    turn_right()
  else if delta == 2 do
    turn_left()
    turn_left()
  end
  move()
end
// Keeps track of the coordinates of the square that blob will jump into
function update_coords with coords, next_path do
  set directions to ["North", "East", "South", "West"]
  if next_path == "North" do
   change coords["y"] to coords["y"] - 1
  else if next_path == "East" do
    change coords["x"] to coords["x"] + 1
  else if next_path == "South" do
    change coords["y"] to coords["y"] + 1
  else if next_path == "West" do
    change coords["x"] to coords["x"] - 1
  end
  return coords
end

// Updated direction will face the same way as what the blob is turning into 
// and then will turn left of that for delta square to check as per the algo
function update_direction with direction, delta do
  return (3 + direction + delta) % 4 + 1
end

// Game Loop
set maze to get_initial_maze()
set coords to find_initial_coords(maze)
set emoji_collection to {}
set square to extract_square(maze, coords)
set direction to initialize_direction(maze, coords)
set delta to -1
set next_path to ""
repeat_until_game_over do
  change square to extract_square(maze, coords)
  change emoji_collection to grab_emoji(emoji_collection, square)
  change delta to choose_next_path(maze, coords, direction)
  move_switch(delta)
  change next_path to get_cardinal_direction(direction, delta)
  change coords to update_coords(coords, next_path)
  change direction to update_direction(direction, delta)
end
announce_emojis(emoji_collection)